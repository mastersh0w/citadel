import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Search, Smile } from 'lucide-react';

interface EmojiPickerProps {
  value?: string;
  onChange: (emoji: string) => void;
  placeholder?: string;
}

// Mock server emojis (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç API call)
const mockServerEmojis = [
  { id: '1', name: 'custom_smile', url: 'üòä', category: 'custom' },
  { id: '2', name: 'server_logo', url: 'üèÜ', category: 'custom' },
  { id: '3', name: 'mod_badge', url: 'üõ°Ô∏è', category: 'custom' },
  { id: '4', name: 'vip_crown', url: 'üëë', category: 'custom' },
  { id: '5', name: 'gamer_controller', url: 'üéÆ', category: 'custom' },
  { id: '6', name: 'artist_palette', url: 'üé®', category: 'custom' },
  { id: '7', name: 'dev_laptop', url: 'üíª', category: 'custom' },
  { id: '8', name: 'music_note', url: 'üéµ', category: 'custom' }
];

// Standard Unicode emoji categories
const standardEmojis = {
  people: [
    'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ', 'üòâ', 'üòä', 'üòá',
    'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', 'üòö', 'üòô', 'ü•≤', 'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù',
    'ü§ë', 'ü§ó', 'ü§≠', 'ü§´', 'ü§î', 'ü§ê', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üòè', 'üòí', 'üôÑ',
    'üò¨', 'ü§•', 'üòî', 'üò™', 'ü§§', 'üò¥', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß', 'ü•µ',
    'ü•∂', 'ü•¥', 'üòµ', 'ü§Ø', 'ü§†', 'ü•≥', 'ü•∏', 'üòé', 'ü§ì', 'üßê'
  ],
  activities: [
    '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì', 'üè∏',
    'üèí', 'üèë', 'ü•ç', 'üèè', '‚õ≥', 'ü™Å', 'üèπ', 'üé£', 'ü§ø', 'ü•ä', 'ü•ã', 'üéΩ', 'üõπ',
    'üõ∑', '‚õ∏Ô∏è', 'ü•å', 'üéø', '‚õ∑Ô∏è', 'üèÇ', 'ü™Ç', 'üèãÔ∏è', 'ü§º', 'ü§∏', '‚õπÔ∏è', 'ü§∫', 'ü§æ',
    'üèåÔ∏è', 'üßò', 'üèá', 'üèä', 'üö¥', 'üöµ', 'üßó', 'ü§π'
  ],
  objects: [
    'üì±', 'üíª', 'üñ•Ô∏è', 'üñ®Ô∏è', '‚å®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üßÆ', 'üì∑',
    'üì∏', 'üìπ', 'üé•', 'üìΩÔ∏è', 'üéûÔ∏è', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†', 'üì∫', 'üìª', 'üéôÔ∏è', 'üéöÔ∏è',
    'üéõÔ∏è', 'üß≠', '‚è±Ô∏è', '‚è≤Ô∏è', '‚è∞', 'üï∞Ô∏è', '‚åõ', '‚è≥', 'üì°', 'üîã', 'üîå', 'üí°', 'üî¶',
    'üïØÔ∏è', 'ü™î', 'üßØ', 'üõ¢Ô∏è', 'üí∏', 'üíµ', 'üí¥', 'üí∂', 'üí∑', 'ü™ô', 'üí∞', 'üí≥'
  ],
  symbols: [
    '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû',
    'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', '‚òÆÔ∏è', '‚úùÔ∏è', '‚ò™Ô∏è', 'üïâÔ∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ',
    'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê', '‚õé', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê',
    '‚ôë', '‚ôí', '‚ôì', 'üÜî', '‚öõÔ∏è', 'üâë', '‚ò¢Ô∏è', '‚ò£Ô∏è', 'üì¥', 'üì≥', 'üà∂', 'üàö', 'üà∏'
  ]
};

export function EmojiPicker({ value, onChange, placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏" }: EmojiPickerProps) {
  const [open, setOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [activeTab, setActiveTab] = useState('server');

  const filteredServerEmojis = mockServerEmojis.filter(emoji =>
    emoji.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const getFilteredStandardEmojis = (category: keyof typeof standardEmojis) => {
    if (!searchQuery) return standardEmojis[category];
    // For standard emojis, we can't really search by name, so just return all if no search
    return standardEmojis[category];
  };

  const handleEmojiSelect = (emoji: string) => {
    onChange(emoji);
    setOpen(false);
    setSearchQuery('');
  };

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          className="w-20 h-12 text-lg justify-center"
          aria-label="–í—ã–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏"
        >
          {value || <Smile className="h-5 w-5 text-muted-foreground" />}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0" align="start">
        <div className="border-b p-3">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="–ü–æ–∏—Å–∫ —ç–º–æ–¥–∑–∏..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <div className="border-b">
            <TabsList className="grid w-full grid-cols-5 h-auto p-1">
              <TabsTrigger value="server" className="text-xs py-2">–°–µ—Ä–≤–µ—Ä</TabsTrigger>
              <TabsTrigger value="people" className="text-xs py-2">–õ—é–¥–∏</TabsTrigger>
              <TabsTrigger value="activities" className="text-xs py-2">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</TabsTrigger>
              <TabsTrigger value="objects" className="text-xs py-2">–û–±—ä–µ–∫—Ç—ã</TabsTrigger>
              <TabsTrigger value="symbols" className="text-xs py-2">–°–∏–º–≤–æ–ª—ã</TabsTrigger>
            </TabsList>
          </div>

          <ScrollArea className="h-64">
            <TabsContent value="server" className="p-3 mt-0">
              {filteredServerEmojis.length > 0 ? (
                <div className="grid grid-cols-8 gap-2">
                  {filteredServerEmojis.map((emoji) => (
                    <Button
                      key={emoji.id}
                      variant="ghost"
                      size="sm"
                      className="h-8 w-8 p-0 text-lg hover:bg-accent"
                      onClick={() => handleEmojiSelect(emoji.url)}
                      title={emoji.name}
                    >
                      {emoji.url}
                    </Button>
                  ))}
                </div>
              ) : (
                <div className="text-center text-sm text-muted-foreground py-4">
                  {searchQuery ? '–≠–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏'}
                </div>
              )}
            </TabsContent>

            <TabsContent value="people" className="p-3 mt-0">
              <div className="grid grid-cols-8 gap-2">
                {getFilteredStandardEmojis('people').map((emoji, index) => (
                  <Button
                    key={index}
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 p-0 text-lg hover:bg-accent"
                    onClick={() => handleEmojiSelect(emoji)}
                  >
                    {emoji}
                  </Button>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="activities" className="p-3 mt-0">
              <div className="grid grid-cols-8 gap-2">
                {getFilteredStandardEmojis('activities').map((emoji, index) => (
                  <Button
                    key={index}
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 p-0 text-lg hover:bg-accent"
                    onClick={() => handleEmojiSelect(emoji)}
                  >
                    {emoji}
                  </Button>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="objects" className="p-3 mt-0">
              <div className="grid grid-cols-8 gap-2">
                {getFilteredStandardEmojis('objects').map((emoji, index) => (
                  <Button
                    key={index}
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 p-0 text-lg hover:bg-accent"
                    onClick={() => handleEmojiSelect(emoji)}
                  >
                    {emoji}
                  </Button>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="symbols" className="p-3 mt-0">
              <div className="grid grid-cols-8 gap-2">
                {getFilteredStandardEmojis('symbols').map((emoji, index) => (
                  <Button
                    key={index}
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 p-0 text-lg hover:bg-accent"
                    onClick={() => handleEmojiSelect(emoji)}
                  >
                    {emoji}
                  </Button>
                ))}
              </div>
            </TabsContent>
          </ScrollArea>
        </Tabs>

        <div className="border-t p-3">
          <p className="text-xs text-muted-foreground">
            {activeTab === 'server' ? '–≠–º–æ–¥–∑–∏ —Å–µ—Ä–≤–µ—Ä–∞' : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏'}
          </p>
        </div>
      </PopoverContent>
    </Popover>
  );
}