import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useLanguage } from '../LanguageProvider';
import { toast } from 'sonner@2.0.3';
import {
  Command,
  Plus,
  Edit,
  Trash2,
  Settings,
  Eye,
  EyeOff,
  Save,
  X,
  Info,
  Users,
  Copy,
  Play,
  Code,
  Hash,
  MessageSquare,
  Zap,
  Clock,
  Star
} from 'lucide-react';

interface CustomCommand {
  id: string;
  name: string;
  description: string;
  trigger: string;
  response: string;
  responseType: 'text' | 'embed';
  embedData?: {
    title?: string;
    description?: string;
    color?: string;
    thumbnail?: string;
    image?: string;
    footer?: string;
  };
  enabled: boolean;
  permissions: string[];
  channels: string[];
  cooldown: number;
  usageCount: number;
  createdAt: string;
  lastUsed?: string;
}

interface CommandSettings {
  prefix: string;
  caseSensitive: boolean;
  deleteInvocation: boolean;
  enableInDMs: boolean;
  logUsage: boolean;
}

const mockChannels = [
  { id: '1', name: '–æ–±—â–∏–π', type: 'text' },
  { id: '2', name: '–∫–æ–º–∞–Ω–¥—ã', type: 'text' },
  { id: '3', name: '–±–æ—Ç—ã', type: 'text' },
  { id: '4', name: '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', type: 'text' }
];

const mockRoles = [
  { id: '1', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', color: '#ef4444' },
  { id: '2', name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', color: '#3b82f6' },
  { id: '3', name: 'VIP', color: '#f59e0b' },
  { id: '4', name: '–£—á–∞—Å—Ç–Ω–∏–∫', color: '#22c55e' }
];

const mockCommands: CustomCommand[] = [
  {
    id: '1',
    name: '–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    trigger: '–ø—Ä–∞–≤–∏–ª–∞',
    response: '–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:\n\n1. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n2. –ù–µ —Å–ø–∞–º—å—Ç–µ\n3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã\n4. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è',
    responseType: 'text',
    enabled: true,
    permissions: [],
    channels: [],
    cooldown: 10,
    usageCount: 45,
    createdAt: '2024-01-10T14:30:00Z',
    lastUsed: '2024-01-20T16:45:00Z'
  },
  {
    id: '2',
    name: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ',
    description: '–≠–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ',
    trigger: '—Å–µ—Ä–≤–µ—Ä',
    response: '',
    responseType: 'embed',
    embedData: {
      title: 'üè∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ',
      description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ.',
      color: '#3b82f6',
      thumbnail: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400',
      footer: '–°–æ–∑–¥–∞–Ω –≤ 2024 –≥–æ–¥—É'
    },
    enabled: true,
    permissions: [],
    channels: ['1', '2'],
    cooldown: 30,
    usageCount: 23,
    createdAt: '2024-01-12T09:15:00Z',
    lastUsed: '2024-01-20T12:30:00Z'
  },
  {
    id: '3',
    name: '–ü–æ–º–æ—â—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º',
    description: '–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤',
    trigger: '–º–æ–¥–ø–æ–º–æ—â—å',
    response: '–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n!kick @user - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n!ban @user - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n!mute @user - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    responseType: 'text',
    enabled: true,
    permissions: ['2'], // –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä
    channels: [],
    cooldown: 0,
    usageCount: 12,
    createdAt: '2024-01-15T11:20:00Z',
    lastUsed: '2024-01-19T15:10:00Z'
  }
];

const defaultSettings: CommandSettings = {
  prefix: '!',
  caseSensitive: false,
  deleteInvocation: false,
  enableInDMs: false,
  logUsage: true
};

export function CustomCommands() {
  const { t } = useLanguage();
  const [commands, setCommands] = useState<CustomCommand[]>([]);
  const [settings, setSettings] = useState<CommandSettings>(defaultSettings);
  const [loading, setLoading] = useState(true);
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [editingCommand, setEditingCommand] = useState<CustomCommand | null>(null);
  const [filter, setFilter] = useState<'all' | 'enabled' | 'disabled'>('all');
  const [activeTab, setActiveTab] = useState('commands');

  // Form states
  const [newCommand, setNewCommand] = useState({
    name: '',
    description: '',
    trigger: '',
    response: '',
    responseType: 'text' as 'text' | 'embed',
    embedData: {
      title: '',
      description: '',
      color: '#3b82f6',
      thumbnail: '',
      image: '',
      footer: ''
    },
    enabled: true,
    permissions: [] as string[],
    channels: [] as string[],
    cooldown: 0
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      setCommands(mockCommands);
      setSettings(defaultSettings);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    } finally {
      setLoading(false);
    }
  };

  const createCommand = async () => {
    if (!newCommand.name || !newCommand.trigger) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    if (commands.some(cmd => cmd.trigger.toLowerCase() === newCommand.trigger.toLowerCase())) {
      toast.error('–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    try {
      const command: CustomCommand = {
        id: `cmd_${Date.now()}`,
        name: newCommand.name,
        description: newCommand.description,
        trigger: newCommand.trigger,
        response: newCommand.response,
        responseType: newCommand.responseType,
        embedData: newCommand.responseType === 'embed' ? newCommand.embedData : undefined,
        enabled: newCommand.enabled,
        permissions: newCommand.permissions,
        channels: newCommand.channels,
        cooldown: newCommand.cooldown,
        usageCount: 0,
        createdAt: new Date().toISOString()
      };

      setCommands(prev => [...prev, command]);
      resetForm();
      setShowCreateDialog(false);
      toast.success('–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É');
    }
  };

  const updateCommand = async () => {
    if (!editingCommand || !newCommand.name || !newCommand.trigger) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    try {
      setCommands(prev => prev.map(cmd => 
        cmd.id === editingCommand.id 
          ? {
              ...cmd,
              name: newCommand.name,
              description: newCommand.description,
              trigger: newCommand.trigger,
              response: newCommand.response,
              responseType: newCommand.responseType,
              embedData: newCommand.responseType === 'embed' ? newCommand.embedData : undefined,
              enabled: newCommand.enabled,
              permissions: newCommand.permissions,
              channels: newCommand.channels,
              cooldown: newCommand.cooldown
            }
          : cmd
      ));

      setEditingCommand(null);
      resetForm();
      setShowCreateDialog(false);
      toast.success('–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É');
    }
  };

  const deleteCommand = async (id: string) => {
    try {
      setCommands(prev => prev.filter(cmd => cmd.id !== id));
      toast.success('–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É');
    }
  };

  const toggleCommand = async (id: string) => {
    try {
      setCommands(prev => prev.map(cmd => 
        cmd.id === id ? { ...cmd, enabled: !cmd.enabled } : cmd
      ));
      toast.success('–°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω');
    } catch (error) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
    }
  };

  const saveSettings = async () => {
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 500));
      toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
  };

  const resetForm = () => {
    setNewCommand({
      name: '',
      description: '',
      trigger: '',
      response: '',
      responseType: 'text',
      embedData: {
        title: '',
        description: '',
        color: '#3b82f6',
        thumbnail: '',
        image: '',
        footer: ''
      },
      enabled: true,
      permissions: [],
      channels: [],
      cooldown: 0
    });
  };

  const editCommand = (command: CustomCommand) => {
    setEditingCommand(command);
    setNewCommand({
      name: command.name,
      description: command.description,
      trigger: command.trigger,
      response: command.response,
      responseType: command.responseType,
      embedData: command.embedData || {
        title: '',
        description: '',
        color: '#3b82f6',
        thumbnail: '',
        image: '',
        footer: ''
      },
      enabled: command.enabled,
      permissions: command.permissions,
      channels: command.channels,
      cooldown: command.cooldown
    });
    setShowCreateDialog(true);
  };

  const testCommand = (command: CustomCommand) => {
    toast.success(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${settings.prefix}${command.trigger}`);
  };

  const filteredCommands = commands.filter(cmd => {
    if (filter === 'enabled') return cmd.enabled;
    if (filter === 'disabled') return !cmd.enabled;
    return true;
  });

  const totalUsage = commands.reduce((sum, cmd) => sum + cmd.usageCount, 0);

  if (loading) {
    return (
      <div className="p-6 space-y-6">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-muted rounded w-1/3"></div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="h-32 bg-muted rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="flex items-center gap-2">
            <Command className="h-6 w-6 text-primary" />
            –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
          </h1>
          <p className="text-muted-foreground">
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
          </p>
        </div>
        <Button onClick={() => { resetForm(); setEditingCommand(null); setShowCreateDialog(true); }} className="gap-2">
          <Plus className="h-4 w-4" />
          –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        </Button>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-primary/10 rounded-lg">
                <Command className="h-6 w-6 text-primary" />
              </div>
              <div>
                <p className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥</p>
                <p className="text-2xl">{commands.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-success/10 rounded-lg">
                <Eye className="h-6 w-6 text-success" />
              </div>
              <div>
                <p className="text-sm text-muted-foreground">–ê–∫—Ç–∏–≤–Ω—ã—Ö</p>
                <p className="text-2xl">{commands.filter(c => c.enabled).length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-warning/10 rounded-lg">
                <Zap className="h-6 w-6 text-warning" />
              </div>
              <div>
                <p className="text-sm text-muted-foreground">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</p>
                <p className="text-2xl">{totalUsage}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-chart-1/10 rounded-lg">
                <Settings className="h-6 w-6 text-chart-1" />
              </div>
              <div>
                <p className="text-sm text-muted-foreground">–ü—Ä–µ—Ñ–∏–∫—Å</p>
                <p className="text-2xl font-mono">{settings.prefix}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        {/* Desktop Tabs */}
        <TabsList className="hidden md:flex">
          <TabsTrigger value="commands">–ö–æ–º–∞–Ω–¥—ã</TabsTrigger>
          <TabsTrigger value="settings">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</TabsTrigger>
        </TabsList>

        {/* Mobile Dropdown */}
        <div className="md:hidden">
          <Select value={activeTab} onValueChange={setActiveTab}>
            <SelectTrigger className="w-full">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="commands">–ö–æ–º–∞–Ω–¥—ã</SelectItem>
              <SelectItem value="settings">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <TabsContent value="commands" className="space-y-6">
          {/* Filter */}
          <div className="flex items-center gap-4">
            <Label>–§–∏–ª—å—Ç—Ä:</Label>
            <Select value={filter} onValueChange={(value: any) => setFilter(value)}>
              <SelectTrigger className="w-48">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">–í—Å–µ –∫–æ–º–∞–Ω–¥—ã</SelectItem>
                <SelectItem value="enabled">–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ</SelectItem>
                <SelectItem value="disabled">–¢–æ–ª—å–∫–æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Commands List */}
          <div className="grid grid-cols-1 gap-4">
            {filteredCommands.map(command => (
              <Card key={command.id}>
                <CardHeader>
                  {/* Desktop Layout */}
                  <div className="hidden md:flex items-start justify-between">
                    <div className="space-y-1 flex-1 min-w-0">
                      <CardTitle className="flex items-center gap-2 flex-wrap">
                        <Code className="h-5 w-5 flex-shrink-0" />
                        <span className="truncate">{command.name}</span>
                        <Badge variant={command.enabled ? "default" : "secondary"} className="flex-shrink-0">
                          {command.enabled ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
                        </Badge>
                        {command.permissions.length > 0 && (
                          <Badge variant="outline" className="flex-shrink-0">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∞</Badge>
                        )}
                      </CardTitle>
                      <CardDescription className="break-words">{command.description}</CardDescription>
                    </div>
                    <div className="flex items-center gap-2 flex-shrink-0">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => testCommand(command)}
                        className="gap-2"
                      >
                        <Play className="h-4 w-4" />
                        –¢–µ—Å—Ç
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => editCommand(command)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Switch
                        checked={command.enabled}
                        onCheckedChange={() => toggleCommand(command.id)}
                      />
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => deleteCommand(command.id)}
                        className="text-destructive hover:text-destructive"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  {/* Mobile Layout */}
                  <div className="md:hidden space-y-4">
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Code className="h-5 w-5 flex-shrink-0" />
                        <CardTitle className="truncate flex-1">{command.name}</CardTitle>
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <Badge variant={command.enabled ? "default" : "secondary"}>
                          {command.enabled ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
                        </Badge>
                        <Switch
                          checked={command.enabled}
                          onCheckedChange={() => toggleCommand(command.id)}
                        />
                      </div>
                      
                      {command.description && (
                        <CardDescription className="break-words">{command.description}</CardDescription>
                      )}
                      
                      {command.permissions.length > 0 && (
                        <Badge variant="outline" className="text-xs">
                          –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
                        </Badge>
                      )}
                    </div>

                    <div className="flex flex-col gap-2 pt-2 border-t">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => testCommand(command)}
                        className="w-full gap-2"
                      >
                        <Play className="h-4 w-4" />
                        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
                      </Button>
                      
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => editCommand(command)}
                          className="flex-1 gap-2"
                        >
                          <Edit className="h-4 w-4" />
                          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => deleteCommand(command.id)}
                          className="text-destructive hover:text-destructive"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Stats Grid */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                    <div>
                      <Label className="text-muted-foreground">–¢—Ä–∏–≥–≥–µ—Ä</Label>
                      <p className="font-mono break-all">{settings.prefix}{command.trigger}</p>
                    </div>
                    <div>
                      <Label className="text-muted-foreground">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</Label>
                      <p>{command.usageCount}</p>
                    </div>
                    <div>
                      <Label className="text-muted-foreground">–ö—É–ª–¥–∞—É–Ω</Label>
                      <p>{command.cooldown > 0 ? `${command.cooldown}—Å` : '–ù–µ—Ç'}</p>
                    </div>
                    <div>
                      <Label className="text-muted-foreground">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</Label>
                      <p className="break-words">{command.lastUsed ? new Date(command.lastUsed).toLocaleString('ru-RU') : '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å'}</p>
                    </div>
                  </div>

                  {command.permissions.length > 0 && (
                    <div>
                      <Label className="text-muted-foreground">–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏</Label>
                      <div className="flex flex-wrap gap-2 mt-1">
                        {command.permissions.map(roleId => {
                          const role = mockRoles.find(r => r.id === roleId);
                          return role ? (
                            <Badge key={roleId} variant="outline" style={{ borderColor: role.color }}>
                              {role.name}
                            </Badge>
                          ) : null;
                        })}
                      </div>
                    </div>
                  )}

                  {command.channels.length > 0 && (
                    <div>
                      <Label className="text-muted-foreground">–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</Label>
                      <div className="flex flex-wrap gap-2 mt-1">
                        {command.channels.map(channelId => {
                          const channel = mockChannels.find(c => c.id === channelId);
                          return channel ? (
                            <Badge key={channelId} variant="outline">
                              #{channel.name}
                            </Badge>
                          ) : null;
                        })}
                      </div>
                    </div>
                  )}

                  <div className="p-3 bg-muted rounded-lg">
                    <Label className="text-muted-foreground">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–∞</Label>
                    {command.responseType === 'text' ? (
                      <p className="mt-1 whitespace-pre-wrap break-words">{command.response}</p>
                    ) : (
                      <div className="mt-2 p-3 border rounded bg-background">
                        <h4 className="font-medium break-words" style={{ color: command.embedData?.color }}>
                          {command.embedData?.title}
                        </h4>
                        {command.embedData?.description && (
                          <p className="text-sm text-muted-foreground mt-1 break-words">
                            {command.embedData.description}
                          </p>
                        )}
                        {command.embedData?.footer && (
                          <p className="text-xs text-muted-foreground mt-2 break-words">
                            {command.embedData.footer}
                          </p>
                        )}
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {filteredCommands.length === 0 && (
            <Card>
              <CardContent className="p-12 text-center">
                <Command className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="font-semibold mb-2">–ù–µ—Ç –∫–æ–º–∞–Ω–¥</h3>
                <p className="text-muted-foreground mb-4">
                  –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
                </p>
                <Button onClick={() => setShowCreateDialog(true)}>
                  <Plus className="h-4 w-4 mr-2" />
                  –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
                </Button>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="settings" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</CardTitle>
              <CardDescription>
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <Label>–ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥</Label>
                  <Input
                    value={settings.prefix}
                    onChange={(e) => setSettings(prev => ({ ...prev, prefix: e.target.value }))}
                    placeholder="!"
                    className="font-mono"
                  />
                  <p className="text-sm text-muted-foreground mt-1">
                    –°–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –ø–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–æ–π
                  </p>
                </div>
              </div>

              <Separator />

              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <Label>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É</Label>
                    <p className="text-sm text-muted-foreground">
                      –£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
                    </p>
                  </div>
                  <Switch
                    checked={settings.caseSensitive}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, caseSensitive: checked }))}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label>–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</Label>
                    <p className="text-sm text-muted-foreground">
                      –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π
                    </p>
                  </div>
                  <Switch
                    checked={settings.deleteInvocation}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, deleteInvocation: checked }))}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label>–†–∞–±–æ—Ç–∞ –≤ –õ–°</Label>
                    <p className="text-sm text-muted-foreground">
                      –†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                    </p>
                  </div>
                  <Switch
                    checked={settings.enableInDMs}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableInDMs: checked }))}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label>–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</Label>
                    <p className="text-sm text-muted-foreground">
                      –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ –ª–æ–≥–∏
                    </p>
                  </div>
                  <Switch
                    checked={settings.logUsage}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, logUsage: checked }))}
                  />
                </div>
              </div>

              <Button onClick={saveSettings} className="gap-2">
                <Save className="h-4 w-4" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Create/Edit Dialog */}
      <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              {editingCommand ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É' : '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É'}
            </DialogTitle>
            <DialogDescription>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            </DialogDescription>
          </DialogHeader>
          
          <Tabs defaultValue="basic" className="space-y-4">
            <TabsList>
              <TabsTrigger value="basic">–û—Å–Ω–æ–≤–Ω–æ–µ</TabsTrigger>
              <TabsTrigger value="response">–û—Ç–≤–µ—Ç</TabsTrigger>
              <TabsTrigger value="permissions">–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞</TabsTrigger>
            </TabsList>

            <TabsContent value="basic" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã *</Label>
                  <Input
                    value={newCommand.name}
                    onChange={(e) => setNewCommand(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
                  />
                </div>
                <div>
                  <Label>–¢—Ä–∏–≥–≥–µ—Ä *</Label>
                  <div className="flex">
                    <div className="px-3 py-2 bg-muted border border-r-0 rounded-l-md font-mono">
                      {settings.prefix}
                    </div>
                    <Input
                      value={newCommand.trigger}
                      onChange={(e) => setNewCommand(prev => ({ ...prev, trigger: e.target.value.replace(/\s/g, '') }))}
                      placeholder="—Ç—Ä–∏–≥–≥–µ—Ä"
                      className="rounded-l-none font-mono"
                    />
                  </div>
                </div>
              </div>
              
              <div>
                <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  value={newCommand.description}
                  onChange={(e) => setNewCommand(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>–ö—É–ª–¥–∞—É–Ω (—Å–µ–∫—É–Ω–¥—ã)</Label>
                  <Input
                    type="number"
                    min="0"
                    value={newCommand.cooldown}
                    onChange={(e) => setNewCommand(prev => ({ ...prev, cooldown: parseInt(e.target.value) || 0 }))}
                  />
                </div>
                <div className="flex items-center gap-2 pt-6">
                  <Switch
                    checked={newCommand.enabled}
                    onCheckedChange={(checked) => setNewCommand(prev => ({ ...prev, enabled: checked }))}
                  />
                  <Label>–ê–∫—Ç–∏–≤–Ω–∞</Label>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="response" className="space-y-4">
              <div>
                <Label>–¢–∏–ø –æ—Ç–≤–µ—Ç–∞</Label>
                <Select value={newCommand.responseType} onValueChange={(value: any) => setNewCommand(prev => ({ ...prev, responseType: value }))}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="text">–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</SelectItem>
                    <SelectItem value="embed">–≠–º–±–µ–¥</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {newCommand.responseType === 'text' ? (
                <div>
                  <Label>–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞</Label>
                  <Textarea
                    value={newCommand.response}
                    onChange={(e) => setNewCommand(prev => ({ ...prev, response: e.target.value }))}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞..."
                    rows={6}
                  />
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                      <Input
                        value={newCommand.embedData.title}
                        onChange={(e) => setNewCommand(prev => ({ 
                          ...prev, 
                          embedData: { ...prev.embedData, title: e.target.value }
                        }))}
                        placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–º–±–µ–¥–∞"
                      />
                    </div>
                    <div>
                      <Label>–¶–≤–µ—Ç</Label>
                      <Input
                        type="color"
                        value={newCommand.embedData.color}
                        onChange={(e) => setNewCommand(prev => ({ 
                          ...prev, 
                          embedData: { ...prev.embedData, color: e.target.value }
                        }))}
                      />
                    </div>
                  </div>
                  
                  <div>
                    <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                    <Textarea
                      value={newCommand.embedData.description}
                      onChange={(e) => setNewCommand(prev => ({ 
                        ...prev, 
                        embedData: { ...prev.embedData, description: e.target.value }
                      }))}
                      placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —ç–º–±–µ–¥–∞..."
                      rows={4}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>URL –º–∏–Ω–∏–∞—Ç—é—Ä—ã</Label>
                      <Input
                        value={newCommand.embedData.thumbnail}
                        onChange={(e) => setNewCommand(prev => ({ 
                          ...prev, 
                          embedData: { ...prev.embedData, thumbnail: e.target.value }
                        }))}
                        placeholder="https://..."
                      />
                    </div>
                    <div>
                      <Label>URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Label>
                      <Input
                        value={newCommand.embedData.image}
                        onChange={(e) => setNewCommand(prev => ({ 
                          ...prev, 
                          embedData: { ...prev.embedData, image: e.target.value }
                        }))}
                        placeholder="https://..."
                      />
                    </div>
                  </div>

                  <div>
                    <Label>–ü–æ–¥–ø–∏—Å—å</Label>
                    <Input
                      value={newCommand.embedData.footer}
                      onChange={(e) => setNewCommand(prev => ({ 
                        ...prev, 
                        embedData: { ...prev.embedData, footer: e.target.value }
                      }))}
                      placeholder="–¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏"
                    />
                  </div>

                  {/* Preview */}
                  <div>
                    <Label>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</Label>
                    <div className="mt-2 p-4 border rounded bg-background">
                      {newCommand.embedData.title && (
                        <h4 className="font-medium" style={{ color: newCommand.embedData.color }}>
                          {newCommand.embedData.title}
                        </h4>
                      )}
                      {newCommand.embedData.description && (
                        <p className="text-sm text-muted-foreground mt-1 whitespace-pre-wrap">
                          {newCommand.embedData.description}
                        </p>
                      )}
                      {newCommand.embedData.footer && (
                        <p className="text-xs text-muted-foreground mt-2">
                          {newCommand.embedData.footer}
                        </p>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </TabsContent>

            <TabsContent value="permissions" className="space-y-4">
              <div>
                <Label>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏</Label>
                <p className="text-sm text-muted-foreground mb-2">
                  –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                </p>
                <div className="grid grid-cols-2 gap-2">
                  {mockRoles.map(role => (
                    <div key={role.id} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={newCommand.permissions.includes(role.id)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setNewCommand(prev => ({
                              ...prev,
                              permissions: [...prev.permissions, role.id]
                            }));
                          } else {
                            setNewCommand(prev => ({
                              ...prev,
                              permissions: prev.permissions.filter(id => id !== role.id)
                            }));
                          }
                        }}
                        className="rounded"
                      />
                      <Label className="flex items-center gap-2">
                        <div 
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: role.color }}
                        />
                        {role.name}
                      </Label>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <Label>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</Label>
                <p className="text-sm text-muted-foreground mb-2">
                  –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö
                </p>
                <div className="grid grid-cols-2 gap-2">
                  {mockChannels.map(channel => (
                    <div key={channel.id} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={newCommand.channels.includes(channel.id)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setNewCommand(prev => ({
                              ...prev,
                              channels: [...prev.channels, channel.id]
                            }));
                          } else {
                            setNewCommand(prev => ({
                              ...prev,
                              channels: prev.channels.filter(id => id !== channel.id)
                            }));
                          }
                        }}
                        className="rounded"
                      />
                      <Label className="flex items-center gap-2">
                        <Hash className="h-4 w-4" />
                        {channel.name}
                      </Label>
                    </div>
                  ))}
                </div>
              </div>
            </TabsContent>
          </Tabs>

          <div className="flex gap-2 pt-4 border-t">
            <Button 
              onClick={editingCommand ? updateCommand : createCommand} 
              className="flex-1"
            >
              <Save className="h-4 w-4 mr-2" />
              {editingCommand ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
            </Button>
            <Button 
              variant="outline" 
              onClick={() => { setShowCreateDialog(false); setEditingCommand(null); resetForm(); }}
            >
              <X className="h-4 w-4 mr-2" />
              –û—Ç–º–µ–Ω–∞
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}