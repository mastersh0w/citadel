import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { Slider } from '@/components/ui/slider';
import {
  Shield,
  AlertTriangle,
  Settings,
  Save,
  RotateCcw,
  CheckCircle,
  XCircle,
  Info,
  Clock,
  Users,
  Hash,
  Zap,
  Target,
  Activity,
  TrendingDown,
  Gauge,
  ExternalLink,
  RefreshCw
} from 'lucide-react';
import { toast } from 'sonner@2.0.3';
import { useLanguage } from '../LanguageProvider';

interface ThreatSettings {
  enabled: boolean;
  threatThreshold: number;
  threatDecay: number;
  actionScores: {
    channelDelete: number;
    channelCreate: number;
    roleCreate: number;
    memberBan: number;
    memberKick: number;
    webhookCreate: number;
  };
}

interface ThreatExample {
  title: string;
  description: string;
  actions: Array<{
    action: string;
    count: number;
    score: number;
  }>;
}

const defaultSettings: ThreatSettings = {
  enabled: false,
  threatThreshold: 50,
  threatDecay: 1.0,
  actionScores: {
    channelDelete: 10,
    channelCreate: 5,
    roleCreate: 5,
    memberBan: 8,
    memberKick: 8,
    webhookCreate: 5
  }
};

export function AntiNukeSettings() {
  const { t } = useLanguage();
  const [settings, setSettings] = useState<ThreatSettings | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);
  const [quarantineRoleConfigured, setQuarantineRoleConfigured] = useState(false);
  const [exampleVariant, setExampleVariant] = useState(0);
  const [isMobile, setIsMobile] = useState(false);

  // Check if screen is mobile size
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      setLoading(true);
      // Simulate loading from API
      await new Promise(resolve => setTimeout(resolve, 1000));
      setSettings(defaultSettings);
      // Simulate checking quarantine role (random for demo)
      setQuarantineRoleConfigured(Math.random() > 0.3); // 70% chance configured
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏-–Ω—é–∫:', error);
      setSettings(defaultSettings);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    } finally {
      setLoading(false);
    }
  };

  const updateSettings = (updates: Partial<ThreatSettings>) => {
    if (!settings) return;
    setSettings({ ...settings, ...updates });
    setHasChanges(true);
  };

  const updateActionScore = (action: keyof ThreatSettings['actionScores'], score: number) => {
    if (!settings) return;
    updateSettings({
      actionScores: {
        ...settings.actionScores,
        [action]: score
      }
    });
  };

  const saveSettings = async () => {
    if (!settings) return;
    
    try {
      setSaving(true);
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      setHasChanges(false);
      toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setSaving(false);
    }
  };

  const resetToDefaults = () => {
    setSettings({ ...defaultSettings });
    setHasChanges(true);
    toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  };

  const getThreatExamples = (): ThreatExample[] => {
    if (!settings) return [];
    
    return [
      {
        title: "üö® –¢–∏–ø–∏—á–Ω–∞—è –∞—Ç–∞–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã",
        description: "–ó–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –ø—ã—Ç–∞–µ—Ç—Å—è —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–µ—Ä–∞",
        actions: [
          { action: "–£–¥–∞–ª–∏–ª –∫–∞–Ω–∞–ª—ã", count: 3, score: settings.actionScores.channelDelete },
          { action: "–°–æ–∑–¥–∞–ª —Å–ø–∞–º-–∫–∞–Ω–∞–ª—ã", count: 2, score: settings.actionScores.channelCreate }
        ]
      },
      {
        title: "‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞—á–∏—Å—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        description: "–ú–∞—Å—Å–æ–≤—ã–µ –±–∞–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        actions: [
          { action: "–ó–∞–±–∞–Ω–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", count: 5, score: settings.actionScores.memberBan },
          { action: "–ö–∏–∫–Ω—É–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", count: 2, score: settings.actionScores.memberKick }
        ]
      },
      {
        title: "üé≠ –•–∏—Ç—Ä–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç–∞–∫–µ",
        description: "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
        actions: [
          { action: "–°–æ–∑–¥–∞–ª —Ä–æ–ª–∏", count: 4, score: settings.actionScores.roleCreate },
          { action: "–°–æ–∑–¥–∞–ª –≤–µ–±—Ö—É–∫–∏", count: 3, score: settings.actionScores.webhookCreate },
          { action: "–£–¥–∞–ª–∏–ª –∫–∞–Ω–∞–ª", count: 1, score: settings.actionScores.channelDelete }
        ]
      },
      {
        title: "üî• –ü–æ–ª–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–∞—è –∞—Ç–∞–∫–∞",
        description: "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º",
        actions: [
          { action: "–£–¥–∞–ª–∏–ª –∫–∞–Ω–∞–ª—ã", count: 2, score: settings.actionScores.channelDelete },
          { action: "–ó–∞–±–∞–Ω–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", count: 3, score: settings.actionScores.memberBan },
          { action: "–°–æ–∑–¥–∞–ª —Ä–æ–ª–∏", count: 2, score: settings.actionScores.roleCreate },
          { action: "–°–æ–∑–¥–∞–ª –≤–µ–±—Ö—É–∫–∏", count: 1, score: settings.actionScores.webhookCreate }
        ]
      }
    ];
  };

  if (loading) {
    return (
      <div className="p-6 space-y-6">
        <div className="flex items-center gap-2">
          <Shield className="h-8 w-8 animate-pulse" />
          <div className="space-y-2">
            <div className="h-8 bg-muted rounded w-48 animate-pulse"></div>
            <div className="h-4 bg-muted rounded w-64 animate-pulse"></div>
          </div>
        </div>
        {[...Array(3)].map((_, i) => (
          <Card key={i} className="animate-pulse">
            <CardHeader>
              <div className="h-6 bg-muted rounded w-1/3"></div>
              <div className="h-4 bg-muted rounded w-2/3"></div>
            </CardHeader>
          </Card>
        ))}
      </div>
    );
  }

  if (!settings) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <XCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
              <p className="text-muted-foreground">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏-–Ω—é–∫</p>
              <Button onClick={loadSettings} className="mt-4">
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div className="min-w-0">
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight flex items-center gap-2">
            <Shield className="h-6 w-6 md:h-8 md:w-8" />
            –ê–Ω—Ç–∏-–ù—é–∫ –∑–∞—â–∏—Ç–∞
          </h1>
          <p className="text-muted-foreground">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
          </p>
        </div>
        
        <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-2">
          <Badge variant={settings.enabled ? "default" : "secondary"} className="gap-1 justify-center">
            {settings.enabled ? (
              <>
                <CheckCircle className="h-3 w-3" />
                –ê–∫—Ç–∏–≤–Ω–æ
              </>
            ) : (
              <>
                <XCircle className="h-3 w-3" />
                –û—Ç–∫–ª—é—á–µ–Ω–æ
              </>
            )}
          </Badge>
          {hasChanges && (
            <Badge variant="secondary" className="gap-1 justify-center">
              <AlertTriangle className="h-3 w-3" />
              –ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
            </Badge>
          )}
        </div>
      </div>

      {/* How it works */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Info className="h-5 w-5" />
            –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã "–ê–Ω—Ç–∏-–Ω—é–∫"
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-muted-foreground">
            "–ê–Ω—Ç–∏-–Ω—é–∫" ‚Äî —ç—Ç–æ –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è –ª–∏–Ω–∏—è –æ–±–æ—Ä–æ–Ω—ã, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –∫–∞–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. 
            –û–Ω–∞ –Ω–µ –≤–º–µ—à–∏–≤–∞–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—ÇÔøΩÔøΩ–∞—Ç–æ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, 
            –≤—ã—è–≤–ª—è—è –∞–Ω–æ–º–∞–ª–∏–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–∏ (–∫—Ä–∞—à-—Ä–µ–π–¥–∞) –∏–ª–∏ –≤–∑–ª–æ–º–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="p-4 bg-muted/50 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Activity className="h-4 w-4 text-primary" />
                <h4 className="font-medium">1. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –û—á–∫–æ–≤</h4>
              </div>
              <p className="text-sm text-muted-foreground">
                –ö–∞–∂–¥–æ–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "–æ—á–∫–∏ —É–≥—Ä–æ–∑—ã"
              </p>
            </div>
            
            <div className="p-4 bg-muted/50 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Gauge className="h-4 w-4 text-primary" />
                <h4 className="font-medium">2. –ü–æ—Ä–æ–≥ –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è</h4>
              </div>
              <p className="text-sm text-muted-foreground">
                –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —É–≥—Ä–æ–∑—ã —Å–∏—Å—Ç–µ–º–∞ —Å—á–∏—Ç–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Ç–∞–∫–æ–π
              </p>
            </div>
            
            <div className="p-4 bg-muted/50 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <TrendingDown className="h-4 w-4 text-primary" />
                <h4 className="font-medium">3. –°–ø–∞–¥ –£–≥—Ä–æ–∑—ã</h4>
              </div>
              <p className="text-sm text-muted-foreground">
                –û—á–∫–∏ —É–≥—Ä–æ–∑—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ "—Å–≥–æ—Ä–∞—é—Ç" —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª–µ–≥–∏—Ç–∏–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
              </p>
            </div>
            
            <div className="p-4 bg-muted/50 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Shield className="h-4 w-4 text-primary" />
                <h4 className="font-medium">4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ö–∞—Ä–∞–Ω—Ç–∏–Ω</h4>
              </div>
              <p className="text-sm text-muted-foreground">
                –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Quarantine Role Check */}
      {!quarantineRoleConfigured && (
        <Alert className="border-warning bg-warning/10">
          <AlertTriangle className="h-4 w-4 text-warning" />
          <AlertTitle className="text-warning">–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–Ω–æ–π —Ä–æ–ª–∏</AlertTitle>
          <AlertDescription className="mt-2">
            <div className="space-y-3">
              <p>
                –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–Ω—Ç–∏-–Ω—é–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä–∞–Ω—Ç–∏–Ω–Ω—É—é —Ä–æ–ª—å. 
                –≠—Ç–∞ —Ä–æ–ª—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —É–≥—Ä–æ–∑—ã.
              </p>
              <Button 
                variant="outline" 
                size="sm" 
                className="gap-2 bg-warning/20 border-warning text-warning hover:bg-warning/30"
                onClick={() => {
                  // Navigate to quarantine page - this would be implemented with proper navigation
                  toast.info('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞...');
                }}
              >
                <ExternalLink className="h-4 w-4" />
                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä–∞–Ω—Ç–∏–Ω–Ω—É—é —Ä–æ–ª—å
              </Button>
            </div>
          </AlertDescription>
        </Alert>
      )}

      {!settings.enabled && (
        <Alert>
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            –°–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏-–Ω—é–∫ –∑–∞—â–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω–∞. –í–∫–ª—é—á–∏—Ç–µ –µ—ë –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç –∞—Ç–∞–∫.
          </AlertDescription>
        </Alert>
      )}

      {/* General Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          </CardTitle>
          <CardDescription>
            –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω—Ç–∏-–Ω—é–∫ –∑–∞—â–∏—Ç—ã
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Enable/Disable */}
          <div className={isMobile ? "space-y-3" : "flex items-center justify-between gap-4"}>
            {isMobile ? (
              <>
                <div className="flex items-center justify-between">
                  <Label className="text-base">–ó–∞—â–∏—Ç–∞ –ê–Ω—Ç–∏-–Ω—é–∫ –∞–∫—Ç–∏–≤–Ω–∞</Label>
                  <Switch
                    checked={settings.enabled}
                    onCheckedChange={(checked) => updateSettings({ enabled: checked })}
                  />
                </div>
                <div className="text-sm text-muted-foreground pl-0">
                  –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.
                </div>
              </>
            ) : (
              <>
                <div className="space-y-0.5 min-w-0 flex-1">
                  <Label className="text-base">–ó–∞—â–∏—Ç–∞ –ê–Ω—Ç–∏-–Ω—é–∫ –∞–∫—Ç–∏–≤–Ω–∞</Label>
                  <div className="text-sm text-muted-foreground">
                    –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.
                  </div>
                </div>
                <Switch
                  checked={settings.enabled}
                  onCheckedChange={(checked) => updateSettings({ enabled: checked })}
                  className="flex-shrink-0"
                />
              </>
            )}
          </div>

          <Separator />

          {/* Threat Threshold */}
          <div className="space-y-4">
            <div className="space-y-2">
              <Label className="text-base flex items-center gap-2">
                <Gauge className="h-4 w-4" />
                –ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
              </Label>
              <div className="text-sm text-muted-foreground">
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —É–≥—Ä–æ–∑—ã, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –Ω–∞–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ–Ω –±—É–¥–µ—Ç –ø–æ–º–µ—â–µ–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω.
              </div>
            </div>
            <div className="space-y-3">
              <Slider
                value={[settings.threatThreshold]}
                onValueChange={([value]) => updateSettings({ threatThreshold: value })}
                max={100}
                min={25}
                step={5}
                className="flex-1"
              />
              <div className="flex items-center justify-between text-sm text-muted-foreground">
                <span>25</span>
                <Input
                  type="number"
                  min="25"
                  max="100"
                  value={settings.threatThreshold}
                  onChange={(e) => updateSettings({ threatThreshold: Math.max(25, Math.min(100, parseInt(e.target.value) || 50)) })}
                  className="w-20 h-8 text-center"
                />
                <span>100</span>
              </div>
            </div>
          </div>

          <Separator />

          {/* Threat Decay */}
          <div className="space-y-4">
            <div className="space-y-2">
              <Label className="text-base flex items-center gap-2">
                <TrendingDown className="h-4 w-4" />
                –°–ø–∞–¥ —É–≥—Ä–æ–∑—ã (–æ—á–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
              </Label>
              <div className="text-sm text-muted-foreground">
                –°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ —É–≥—Ä–æ–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–º–∞–µ—Ç—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É. –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫ –º–µ–¥–ª–µ–Ω–Ω—ã–º, —Ä–∞—Å—Ç—è–Ω—É—Ç—ã–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è–º.
              </div>
            </div>
            <div className="space-y-3">
              <Slider
                value={[settings.threatDecay]}
                onValueChange={([value]) => updateSettings({ threatDecay: Math.round(value * 10) / 10 })}
                max={5}
                min={0.2}
                step={0.1}
                className="flex-1"
              />
              <div className="flex items-center justify-between text-sm text-muted-foreground">
                <span>0.2</span>
                <Input
                  type="number"
                  min="0.2"
                  max="5.0"
                  step="0.1"
                  value={settings.threatDecay}
                  onChange={(e) => updateSettings({ threatDecay: Math.max(0.2, Math.min(5.0, parseFloat(e.target.value) || 1.0)) })}
                  className="w-20 h-8 text-center"
                />
                <span>5.0</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Action Scores */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-5 w-5" />
            –û—á–∫–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è
          </CardTitle>
          <CardDescription>
            –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Channel Delete */}
            <div className="space-y-3 p-4 border rounded-lg">
              <div className="space-y-1">
                <Label className="text-base font-medium">–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</Label>
                <p className="text-sm text-muted-foreground">
                  –û—á–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –≠—Ç–æ —Å–∞–º–æ–µ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–µ –∏ –∑–∞–º–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∞—Ç–∞–∫–µ.
                </p>
              </div>
              <Input
                type="number"
                min="1"
                max="50"
                value={settings.actionScores.channelDelete}
                onChange={(e) => updateActionScore('channelDelete', Math.max(1, Math.min(50, parseInt(e.target.value) || 10)))}
                className="w-20"
              />
            </div>

            {/* Channel Create */}
            <div className="space-y-3 p-4 border rounded-lg">
              <div className="space-y-1">
                <Label className="text-base font-medium">–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</Label>
                <p className="text-sm text-muted-foreground">
                  –û—á–∫–∏ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–ø–∞–º-—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏.
                </p>
              </div>
              <Input
                type="number"
                min="1"
                max="20"
                value={settings.actionScores.channelCreate}
                onChange={(e) => updateActionScore('channelCreate', Math.max(1, Math.min(20, parseInt(e.target.value) || 5)))}
                className="w-20"
              />
            </div>

            {/* Role Create */}
            <div className="space-y-3 p-4 border rounded-lg">
              <div className="space-y-1">
                <Label className="text-base font-medium">–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏</Label>
                <p className="text-sm text-muted-foreground">
                  –û—á–∫–∏ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏. –ó–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–æ—Ç–Ω–∏ —Ä–æ–ª–µ–π –¥–ª—è "–∑–∞—Å–æ—Ä–µ–Ω–∏—è" –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞.
                </p>
              </div>
              <Input
                type="number"
                min="1"
                max="20"
                value={settings.actionScores.roleCreate}
                onChange={(e) => updateActionScore('roleCreate', Math.max(1, Math.min(20, parseInt(e.target.value) || 5)))}
                className="w-20"
              />
            </div>

            {/* Member Ban */}
            <div className="space-y-3 p-4 border rounded-lg">
              <div className="space-y-1">
                <Label className="text-base font-medium">–ë–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞</Label>
                <p className="text-sm text-muted-foreground">
                  –û—á–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–π –±–∞–Ω. –ú–∞—Å—Å–æ–≤—ã–π –±–∞–Ω –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± "—É–±–∏—Ç—å" —Å–µ—Ä–≤–µ—Ä.
                </p>
              </div>
              <Input
                type="number"
                min="1"
                max="30"
                value={settings.actionScores.memberBan}
                onChange={(e) => updateActionScore('memberBan', Math.max(1, Math.min(30, parseInt(e.target.value) || 8)))}
                className="w-20"
              />
            </div>

            {/* Member Kick */}
            <div className="space-y-3 p-4 border rounded-lg">
              <div className="space-y-1">
                <Label className="text-base font-medium">–ö–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞</Label>
                <p className="text-sm text-muted-foreground">
                  –û—á–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–π –∫–∏–∫ (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞). –ú–∞—Å—Å–æ–≤—ã–π –∫–∏–∫ –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–æ–∂–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.
                </p>
              </div>
              <Input
                type="number"
                min="1"
                max="30"
                value={settings.actionScores.memberKick}
                onChange={(e) => updateActionScore('memberKick', Math.max(1, Math.min(30, parseInt(e.target.value) || 8)))}
                className="w-20"
              />
            </div>

            {/* Webhook Create */}
            <div className="space-y-3 p-4 border rounded-lg">
              <div className="space-y-1">
                <Label className="text-base font-medium">–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞</Label>
                <p className="text-sm text-muted-foreground">
                  –û—á–∫–∏ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ. –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–ª–∏ —Å–ø–∞–º–∞.
                </p>
              </div>
              <Input
                type="number"
                min="1"
                max="20"
                value={settings.actionScores.webhookCreate}
                onChange={(e) => updateActionScore('webhookCreate', Math.max(1, Math.min(20, parseInt(e.target.value) || 5)))}
                className="w-20"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Threat Examples */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="h-5 w-5" />
            –ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ —É–≥—Ä–æ–∑—ã
          </CardTitle>
          <CardDescription>
            –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∞—Ç–∞–∫
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {/* Example Selector */}
            <div className="flex items-center gap-2">
              <Label>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:</Label>
              <div className="flex gap-1">
                {getThreatExamples().map((_, index) => (
                  <Button
                    key={index}
                    variant={exampleVariant === index ? "default" : "outline"}
                    size="sm"
                    onClick={() => setExampleVariant(index)}
                    className="w-8 h-8 p-0"
                  >
                    {index + 1}
                  </Button>
                ))}
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setExampleVariant((prev) => (prev + 1) % getThreatExamples().length)}
                className="gap-1"
              >
                <RefreshCw className="h-3 w-3" />
                –î–∞–ª–µ–µ
              </Button>
            </div>

            {/* Current Example */}
            {(() => {
              const example = getThreatExamples()[exampleVariant];
              if (!example) return null;

              const totalScore = example.actions.reduce((sum, action) => sum + (action.score * action.count), 0);
              const isBlocked = totalScore >= settings.threatThreshold;

              return (
                <Alert className={isBlocked ? "border-destructive bg-destructive/5" : "border-success bg-success/5"}>
                  <Info className={`h-4 w-4 ${isBlocked ? 'text-destructive' : 'text-success'}`} />
                  <AlertDescription>
                    <div className="space-y-3">
                      <div>
                        <h4 className="font-medium">{example.title}</h4>
                        <p className="text-sm text-muted-foreground">{example.description}</p>
                      </div>
                      
                      <div className="space-y-2">
                        <p className="font-medium">–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥:</p>
                        <ul className="space-y-1">
                          {example.actions.map((action, index) => (
                            <li key={index} className="flex justify-between text-sm">
                              <span>{action.action} ({action.count}—Ö)</span>
                              <span className="font-mono">
                                {action.score} √ó {action.count} = {action.score * action.count} –æ—á–∫–æ–≤
                              </span>
                            </li>
                          ))}
                        </ul>
                      </div>

                      <div className="border-t pt-2">
                        <div className="flex justify-between items-center">
                          <span className="font-medium">–ò—Ç–æ–≥–æ:</span>
                          <span className="font-mono">
                            {totalScore} –æ—á–∫–æ–≤ –∏–∑ {settings.threatThreshold}
                          </span>
                        </div>
                        <div className="mt-2">
                          <div className="w-full bg-muted rounded-full h-2">
                            <div 
                              className={`h-2 rounded-full transition-all ${
                                isBlocked ? 'bg-destructive' : 'bg-success'
                              }`}
                              style={{ width: `${Math.min(100, (totalScore / settings.threatThreshold) * 100)}%` }}
                            />
                          </div>
                        </div>
                        <p className={`font-medium mt-2 ${isBlocked ? 'text-destructive' : 'text-success'}`}>
                          {isBlocked 
                            ? 'üö® –ö–ê–†–ê–ù–¢–ò–ù - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!' 
                            : '‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ - –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã'}
                        </p>
                      </div>
                    </div>
                  </AlertDescription>
                </Alert>
              );
            })()}
          </div>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-3 justify-end">
        <Button 
          variant="outline" 
          onClick={resetToDefaults}
          className="gap-2"
        >
          <RotateCcw className="h-4 w-4" />
          –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é
        </Button>
        
        <Button 
          onClick={saveSettings} 
          disabled={!hasChanges || saving}
          className="gap-2"
        >
          <Save className="h-4 w-4" />
          {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
        </Button>
      </div>
    </div>
  );
}