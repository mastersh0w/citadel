// apps/web_api/src/utils/api.ts

// --- –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨: –ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–∞—à–µ–º—É FastAPI –±—ç–∫–µ–Ω–¥—É ---
const API_BASE_URL = 'http://localhost:8001/api';

// !!! –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_GUILD_ID' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≤–∞—à–µ–≥–æ Discord —Å–µ—Ä–≤–µ—Ä–∞ !!!
// –ù–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö –º—ã —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º, –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
const GUILD_ID = '1302945292772966460'; 

/**
 * –¢–∏–ø –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–∞—à–µ–≥–æ API.
 * –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç–æ–º
 * —Å –ø–æ–ª—è–º–∏ `success` –∏ `data` (–∏–ª–∏ `error`).
 */
export interface ApiResponse<T> {
  success: boolean;
  data: T;
  error?: string;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–∞—à–µ–º—É API.
 * –û–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π URL, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏.
 * @param endpoint - –ü—É—Ç—å –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/guilds/ID/dashboard-stats`)
 * @param options - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è fetch (method, body –∏ —Ç.–¥.)
 * @returns –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç ApiResponse.
 */
async function fetchApi<T>(endpoint: string, options: RequestInit = {}): Promise<ApiResponse<T>> {
    try {
        const response = await fetch(`${API_BASE_URL}${endpoint}`, {
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
        });

        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - –Ω–µ 2xx, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ detail: 'Unknown server error' }));
            throw new Error(errorData.detail || `Network error: ${response.status}`);
        }
        
        const data = await response.json();
        return { success: true, data };

    } catch (error: any) {
        console.error(`API Error fetching ${endpoint}:`, error);
        // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
        return { success: false, data: null as any, error: error.message };
    }
}
// --- –ö–û–ù–ï–¶ –û–°–ù–û–í–ù–û–ô –ß–ê–°–¢–ò ---


// --- –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø API-–ú–û–î–£–õ–ï–ô ---
// –ú—ã —Ä–µ–∞–ª–∏–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã —Å–µ–π—á–∞—Å,
// –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ "–∑–∞–≥–ª—É—à–∫–∏", –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.
// –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫.

const dashboardApi = {
  // –≠–¢–û –†–ê–ë–û–ß–ê–Ø –§–£–ù–ö–¶–ò–Ø, –ö–û–¢–û–†–ê–Ø –û–ë–†–ê–©–ê–ï–¢–°–Ø –ö –ù–ê–®–ï–ú–£ FASTAPI
  getStatistics: () => fetchApi(`/guilds/${GUILD_ID}/dashboard-stats`),
  // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∏. –û–Ω–∏ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞ –º—ã –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –∏—Ö –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.
  getRecentActivity: async (): Promise<ApiResponse<any[]>> => {
      console.warn("API call to getRecentActivity is not implemented yet.");
      return Promise.resolve({ success: true, data: [] });
  },
  getSystemStatus: async (): Promise<ApiResponse<any>> => {
       console.warn("API call to getSystemStatus is not implemented yet.");
       return Promise.resolve({ success: true, data: { telegramIntegration: { enabled: false, configured: false } } });
  }
};

const quarantineApi = {
  checkRole: async (): Promise<ApiResponse<any>> => {
      console.warn("API call to quarantine.checkRole is not implemented yet.");
      return Promise.resolve({ success: true, data: { exists: true, name: 'üö´ –ö–∞—Ä–∞–Ω—Ç–∏–Ω', id: '12345' } }); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  },
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ "is not a function"
  getEntries: async () => Promise.resolve({ success: true, data: [] }),
  reviewEntry: async () => Promise.resolve({ success: true, data: {} })
};


// –ü—É—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π API
const antiNukeApi = {};
const moderationApi = {};
const rankingApi = {};
const notificationsApi = {};
const backupApi = {};
const whitelistApi = {};
const auditApi = {};
const guildApi = {};
const bannerApi = {};
const accessControlApi = {};
const ticketApi = {};


// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π API –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const api = {
  antiNuke: antiNukeApi,
  moderation: moderationApi,
  ranking: rankingApi,
  notifications: notificationsApi,
  backup: backupApi,
  quarantine: quarantineApi,
  whitelist: whitelistApi,
  audit: auditApi,
  guild: guildApi,
  dashboard: dashboardApi,
  banner: bannerApi,
  accessControl: accessControlApi,
  ticket: ticketApi
};